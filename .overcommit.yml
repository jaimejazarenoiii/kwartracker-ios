# Default configuration that all Overcommit configurations inherit from.
#
# This is an opinionated list of which hooks are valuable to run and what their
# out-of-the-box settings should be.
#-------------------------------------------------------------------------------

# Loads Bundler context from a Gemfile. If false, does nothing (default).
#
# Specifying a Gemfile for Bundler to load allows you to control which gems are
# available in the load path (i.e. loadable via `require`) within your hook
# runs. Note that having a Gemfile requires you to include `overcommit` itself
# in your Gemfile (otherwise Overcommit can't load itself!).
#
# This is useful if you want to:
#
#   - Enforce a specific version of Overcommit to use for all hook runs
#     (or to use a version from the master branch that has not been released yet)
#   - Enforce a specific version or unreleased branch is used for a gem you want
#     to use in your git hooks
#
# WARNING: This makes your hook runs slower, but you can work around this!
#
# Loading a Bundler context necessarily adds a startup delay to your hook runs
# as Bundler parses the Gemfile and checks that the dependencies are satisfied.
# Thus for projects with many gems this can introduce a noticeable delay.
#
# The recommended workaround is to create a separate Gemfile in the root of your
# repository (call it `.overcommit_gems.rb`), and include only the gems that
# your Overcommit hooks need in order to run. This significantly reduces the
# startup delay in your hook runs. Make sure to commit both
# `.overcommit_gems.rb` and the resulting `.overcommit_gems.rb.lock` file to
# your repository, and then set the `gemfile` option below to the name you gave
# the file.
# (Generate lock file by running `bundle install --gemfile=.overcommit_gems.rb`)
gemfile: false

# Where to store hook plugins specific to a repository. These are loaded in
# addition to the default hooks Overcommit comes with. The location is relative
# to the root of the repository.
plugin_directory: '.git-hooks'

# Whether to hide hook output by default. This results in completely silent hook
# runs except in the case of warning or failure.
quiet: false

# Number of hooks that can be run concurrently. Typically this won't need to be
# adjusted, but if you know that some of your hooks themselves use multiple
# processors you can lower this value accordingly. You can define
# single-operator mathematical expressions, e.g. '%{processors} * 2', or
# '%{processors} / 2'.
concurrency: '%{processors}'

# Whether to check if a hook plugin has changed since Overcommit last ran it.
# This is a defense mechanism when working with repositories which can contain
# untrusted code (e.g. when you fetch a pull request from a third party).
# See https://github.com/brigade/overcommit#security for more information.
verify_signatures: true

# Hooks that are run against every commit message after a user has written it.
# These hooks are useful for enforcing policies on commit messages written for a
# project.
CommitMsg:
  ALL:
    requires_files: false
    quiet: false

  CapitalizedSubject:
    enabled: true
    description: 'Check subject capitalization'

  EmptyMessage:
    enabled: true
    description: 'Check for empty commit message'
    quiet: true

  HardTabs:
    enabled: true
    description: 'Check for hard tabs'

  RussianNovel:
    enabled: true
    description: 'Check length of commit message'
    quiet: true

  SingleLineSubject:
    enabled: true
    description: 'Check subject line'

  TextWidth:
    enabled: true
    description: 'Check text width'
    max_subject_width: 60
    min_subject_width: 0
    max_body_width: 72

  TrailingPeriod:
    enabled: true
    description: 'Check for trailing periods in subject'

# Hooks that are run after `git commit` is executed, before the commit message
# editor is displayed. These hooks are ideal for syntax checkers, linters, and
# other checks that you want to run before you allow a commit object to be
# created.
PreCommit:
  ALL:
    problem_on_unmodified_line: report
    requires_files: false
    required: true
    quiet: false

  AuthorEmail:
    enabled: true
    description: 'Check author email'
    requires_files: false
    required: true
    quiet: true
    pattern: '^[^@]+@.*$'

  AuthorName:
    enabled: true
    description: 'Check for author name'
    requires_files: false
    required: true
    quiet: true

  BundleCheck:
    enabled: true
    description: 'Check Gemfile dependencies'
    required_executable: 'bundle'
    flags: ['check']
    install_command: 'gem install bundler'
    include:
      - 'Gemfile'
      - 'Gemfile.lock'
      - '*.gemspec'

  FixMe:
    enabled: true
    description: 'Check for "token" strings'
    required_executable: 'grep'
    flags: ['-IEHnw']
    keywords: ['BROKEN', 'BUG', 'ERROR', 'FIXME', 'HACK', 'NOTE', 'OPTIMIZE', 'REVIEW', 'TODO', 'WTF', 'XXX']

  FileSize:
    enabled: true
    description: 'Check for oversized files'
    size_limit_bytes: 1_000_000

  SwiftLint:
    enabled: true
    description: 'Analyze with SwiftLint'
    required_executable: 'swiftlint'
    flags: ['lint', '--strict']
    install_command: 'brew install swiftlint'
    include: '**/*.swift'

# Hooks that run after HEAD changes or a file is explicitly checked out.
PostCheckout:
  ALL:
    required: true
    quiet: false
    skip_file_checkout: true

  BundleInstall:
    enabled: true
    description: 'Install Bundler dependencies'
    requires_files: true
    required_executable: 'bundle'
    install_command: 'gem install bundler'
    flags: ['install']
    include:
      - 'Gemfile'
      - 'Gemfile.lock'
      - '*.gemspec'

# Hooks that run after a commit is created.
PostCommit:
  ALL:
    requires_files: false
    required: false
    quiet: false

# Hooks that run after `git merge` executes successfully (no merge conflicts).
PostMerge:
  ALL:
    requires_files: false
    quiet: false

  BundleInstall:
    enabled: false
    description: 'Install Bundler dependencies'
    requires_files: true
    required_executable: 'bundle'
    install_command: 'gem install bundler'
    flags: ['install']
    include:
      - 'Gemfile'
      - 'Gemfile.lock'
      - '*.gemspec'

# Hooks that run after a commit is modified by an amend or rebase.
PostRewrite:
  ALL:
    requires_files: false
    quiet: false

  BundleInstall:
    enabled: false
    description: 'Install Bundler dependencies'
    requires_files: true
    required_executable: 'bundle'
    install_command: 'gem install bundler'
    flags: ['install']
    include:
      - 'Gemfile'
      - 'Gemfile.lock'
      - '*.gemspec'

# Hooks that run during the `prepare-commit-msg` hook.
PrepareCommitMsg:
  ALL:
    requires_files: false
    required: false
    quiet: false

  ReplaceBranch:
    enabled: false
    description: 'Prepends the commit message with text based on the branch name'
    branch_pattern: '\A(\d+)-(\w+).*\z'
    replacement_text: '[#\1]'
    skipped_commit_types:
     - 'message'  # if message is given via `-m`, `-F`
     - 'template' # if `-t` is given or `commit.template` is set
     - 'commit'   # if `-c`, `-C`, or `--amend` is given
     - 'merge'    # if merging
     - 'squash'   # if squashing
    on_fail: warn

# Hooks that run during `git push`, after remote refs have been updated but
# before any objects have been transferred.
PrePush:
  ALL:
    requires_files: false
    required: false
    quiet: false

  ## set enable to true when ./bin/run-test.sh has created
  RunTestsWithFastlane:
    enabled: false
    requires_files: false
    required: true
    quite: false
    required_executable: './bin/run-tests.sh'

# Hooks that run during `git rebase`, before any commits are rebased.
# If a hook fails, the rebase is aborted.
PreRebase:
  ALL:
    requires_files: false
    required: false
    quiet: false

  MergedCommits:
    enabled: false
    description: 'Check for commits that have already been merged'
    branches: ['master']
