// @generated
//  This file was automatically generated and should not be edited.

import Apollo
import Foundation

/// Autogenerated input type of UpdateProfile
public struct UpdateProfileInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - firstName
  ///   - middleName
  ///   - lastName
  ///   - gender
  ///   - age
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(firstName: String, middleName: Swift.Optional<String?> = nil, lastName: String, gender: Int, age: Int, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["firstName": firstName, "middleName": middleName, "lastName": lastName, "gender": gender, "age": age, "clientMutationId": clientMutationId]
  }

  public var firstName: String {
    get {
      return graphQLMap["firstName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var middleName: Swift.Optional<String?> {
    get {
      return graphQLMap["middleName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "middleName")
    }
  }

  public var lastName: String {
    get {
      return graphQLMap["lastName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var gender: Int {
    get {
      return graphQLMap["gender"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var age: Int {
    get {
      return graphQLMap["age"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "age")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Autogenerated input type of AddCategory
public struct AddCategoryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - title
  ///   - categoryGroupId
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(title: String, categoryGroupId: GraphQLID, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["title": title, "categoryGroupId": categoryGroupId, "clientMutationId": clientMutationId]
  }

  public var title: String {
    get {
      return graphQLMap["title"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  public var categoryGroupId: GraphQLID {
    get {
      return graphQLMap["categoryGroupId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "categoryGroupId")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Autogenerated input type of AddCategoryGroup
public struct AddCategoryGroupInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - title
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(title: String, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["title": title, "clientMutationId": clientMutationId]
  }

  public var title: String {
    get {
      return graphQLMap["title"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Autogenerated input type of AddWallet
public struct AddWalletInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - title
  ///   - currency
  ///   - amount
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(title: String, currency: Int, amount: Double, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["title": title, "currency": currency, "amount": amount, "clientMutationId": clientMutationId]
  }

  public var title: String {
    get {
      return graphQLMap["title"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  public var currency: Int {
    get {
      return graphQLMap["currency"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "currency")
    }
  }

  public var amount: Double {
    get {
      return graphQLMap["amount"] as! Double
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "amount")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Autogenerated input type of DeleteCategoryGroup
public struct DeleteCategoryGroupInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - id
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(id: GraphQLID, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["id": id, "clientMutationId": clientMutationId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Autogenerated input type of DeleteCategory
public struct DeleteCategoryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - id
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(id: GraphQLID, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["id": id, "clientMutationId": clientMutationId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Autogenerated input type of EditCategory
public struct EditCategoryInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - id
  ///   - title
  ///   - categoryGroupId
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(id: GraphQLID, title: String, categoryGroupId: GraphQLID, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["id": id, "title": title, "categoryGroupId": categoryGroupId, "clientMutationId": clientMutationId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var title: String {
    get {
      return graphQLMap["title"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  public var categoryGroupId: GraphQLID {
    get {
      return graphQLMap["categoryGroupId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "categoryGroupId")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Autogenerated input type of EditCategoryGroup
public struct EditCategoryGroupInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - id
  ///   - title
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(id: GraphQLID, title: String, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["id": id, "title": title, "clientMutationId": clientMutationId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var title: String {
    get {
      return graphQLMap["title"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Autogenerated input type of EditWallet
public struct EditWalletInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - id
  ///   - title
  ///   - currency
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(id: GraphQLID, title: String, currency: Int, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["id": id, "title": title, "currency": currency, "clientMutationId": clientMutationId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var title: String {
    get {
      return graphQLMap["title"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  public var currency: Int {
    get {
      return graphQLMap["currency"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "currency")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Autogenerated input type of SignUpWithEmail
public struct SignUpWithEmailInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - email
  ///   - password
  ///   - passwordConfirmation
  ///   - profile
  ///   - clientMutationId: A unique identifier for the client performing the mutation.
  public init(email: String, password: String, passwordConfirmation: String, profile: Swift.Optional<ProfileInput?> = nil, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["email": email, "password": password, "passwordConfirmation": passwordConfirmation, "profile": profile, "clientMutationId": clientMutationId]
  }

  public var email: String {
    get {
      return graphQLMap["email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var password: String {
    get {
      return graphQLMap["password"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  public var passwordConfirmation: String {
    get {
      return graphQLMap["passwordConfirmation"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "passwordConfirmation")
    }
  }

  public var profile: Swift.Optional<ProfileInput?> {
    get {
      return graphQLMap["profile"] as? Swift.Optional<ProfileInput?> ?? Swift.Optional<ProfileInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "profile")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

/// Arguments for user profile
public struct ProfileInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - firstName
  ///   - middleName
  ///   - lastName
  ///   - gender
  ///   - age
  public init(firstName: String, middleName: Swift.Optional<String?> = nil, lastName: String, gender: Int, age: Int) {
    graphQLMap = ["firstName": firstName, "middleName": middleName, "lastName": lastName, "gender": gender, "age": age]
  }

  public var firstName: String {
    get {
      return graphQLMap["firstName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var middleName: Swift.Optional<String?> {
    get {
      return graphQLMap["middleName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "middleName")
    }
  }

  public var lastName: String {
    get {
      return graphQLMap["lastName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var gender: Int {
    get {
      return graphQLMap["gender"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var age: Int {
    get {
      return graphQLMap["age"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "age")
    }
  }
}

public struct CredentialsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - email
  ///   - password
  public init(email: String, password: String) {
    graphQLMap = ["email": email, "password": password]
  }

  public var email: String {
    get {
      return graphQLMap["email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var password: String {
    get {
      return graphQLMap["password"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }
}

public final class ProfileUpdateMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation profileUpdate($input: UpdateProfileInput!) {
      updateProfile(input: $input) {
        __typename
        id
        age
        email
        firstName
        gender
        lastName
        middleName
      }
    }
    """

  public let operationName: String = "profileUpdate"

  public var input: UpdateProfileInput

  public init(input: UpdateProfileInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updateProfile", arguments: ["input": GraphQLVariable("input")], type: .object(UpdateProfile.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateProfile: UpdateProfile? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateProfile": updateProfile.flatMap { (value: UpdateProfile) -> ResultMap in value.resultMap }])
    }

    /// Update current user profile
    public var updateProfile: UpdateProfile? {
      get {
        return (resultMap["updateProfile"] as? ResultMap).flatMap { UpdateProfile(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "updateProfile")
      }
    }

    public struct UpdateProfile: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("age", type: .scalar(Int.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("middleName", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID, age: Int? = nil, email: String, firstName: String, gender: String? = nil, lastName: String, middleName: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "age": age, "email": email, "firstName": firstName, "gender": gender, "lastName": lastName, "middleName": middleName])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var age: Int? {
        get {
          return resultMap["age"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "age")
        }
      }

      public var email: String {
        get {
          return resultMap["email"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      public var firstName: String {
        get {
          return resultMap["firstName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "firstName")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var lastName: String {
        get {
          return resultMap["lastName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }
    }
  }
}

public final class AddCategoryMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation AddCategory($input: AddCategoryInput!) {
      addCategory(input: $input) {
        __typename
        id
        title
      }
    }
    """

  public let operationName: String = "AddCategory"

  public var input: AddCategoryInput

  public init(input: AddCategoryInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("addCategory", arguments: ["input": GraphQLVariable("input")], type: .object(AddCategory.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(addCategory: AddCategory? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "addCategory": addCategory.flatMap { (value: AddCategory) -> ResultMap in value.resultMap }])
    }

    /// Add Category
    public var addCategory: AddCategory? {
      get {
        return (resultMap["addCategory"] as? ResultMap).flatMap { AddCategory(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "addCategory")
      }
    }

    public struct AddCategory: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Category"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID, title: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }
    }
  }
}

public final class AddParentCategoryMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation AddParentCategory($input: AddCategoryGroupInput!) {
      addCategoryGroup(input: $input) {
        __typename
        id
        title
      }
    }
    """

  public let operationName: String = "AddParentCategory"

  public var input: AddCategoryGroupInput

  public init(input: AddCategoryGroupInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("addCategoryGroup", arguments: ["input": GraphQLVariable("input")], type: .object(AddCategoryGroup.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(addCategoryGroup: AddCategoryGroup? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "addCategoryGroup": addCategoryGroup.flatMap { (value: AddCategoryGroup) -> ResultMap in value.resultMap }])
    }

    /// Add Category Group
    public var addCategoryGroup: AddCategoryGroup? {
      get {
        return (resultMap["addCategoryGroup"] as? ResultMap).flatMap { AddCategoryGroup(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "addCategoryGroup")
      }
    }

    public struct AddCategoryGroup: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CategoryGroup"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID, title: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "CategoryGroup", "id": id, "title": title])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }
    }
  }
}

public final class AddWalletMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation AddWallet($addWalletInput: AddWalletInput!) {
      addWallet(input: $addWalletInput) {
        __typename
        currency
        id
        title
        transactions {
          __typename
          id
          amount
          title
          datetime
          category {
            __typename
            id
            title
            budgets {
              __typename
              id
              amount
            }
          }
        }
      }
    }
    """

  public let operationName: String = "AddWallet"

  public var addWalletInput: AddWalletInput

  public init(addWalletInput: AddWalletInput) {
    self.addWalletInput = addWalletInput
  }

  public var variables: GraphQLMap? {
    return ["addWalletInput": addWalletInput]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("addWallet", arguments: ["input": GraphQLVariable("addWalletInput")], type: .object(AddWallet.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(addWallet: AddWallet? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "addWallet": addWallet.flatMap { (value: AddWallet) -> ResultMap in value.resultMap }])
    }

    /// Sign in user
    public var addWallet: AddWallet? {
      get {
        return (resultMap["addWallet"] as? ResultMap).flatMap { AddWallet(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "addWallet")
      }
    }

    public struct AddWallet: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Wallet"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .nonNull(.scalar(String.self))),
          GraphQLField("transactions", type: .list(.nonNull(.object(Transaction.selections)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(currency: String, id: GraphQLID, title: String, transactions: [Transaction]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Wallet", "currency": currency, "id": id, "title": title, "transactions": transactions.flatMap { (value: [Transaction]) -> [ResultMap] in value.map { (value: Transaction) -> ResultMap in value.resultMap } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var currency: String {
        get {
          return resultMap["currency"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "currency")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String {
        get {
          return resultMap["title"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var transactions: [Transaction]? {
        get {
          return (resultMap["transactions"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Transaction] in value.map { (value: ResultMap) -> Transaction in Transaction(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Transaction]) -> [ResultMap] in value.map { (value: Transaction) -> ResultMap in value.resultMap } }, forKey: "transactions")
        }
      }

      public struct Transaction: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Transaction"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("amount", type: .nonNull(.scalar(Double.self))),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("datetime", type: .nonNull(.scalar(String.self))),
            GraphQLField("category", type: .object(Category.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID, amount: Double, title: String? = nil, datetime: String, category: Category? = nil) {
          self.init(unsafeResultMap: ["__typename": "Transaction", "id": id, "amount": amount, "title": title, "datetime": datetime, "category": category.flatMap { (value: Category) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var amount: Double {
          get {
            return resultMap["amount"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "amount")
          }
        }

        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        public var datetime: String {
          get {
            return resultMap["datetime"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "datetime")
          }
        }

        public var category: Category? {
          get {
            return (resultMap["category"] as? ResultMap).flatMap { Category(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "category")
          }
        }

        public struct Category: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Category"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("budgets", type: .nonNull(.list(.nonNull(.object(Budget.selections))))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: GraphQLID, title: String? = nil, budgets: [Budget]) {
            self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title, "budgets": budgets.map { (value: Budget) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return resultMap["id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }

          public var budgets: [Budget] {
            get {
              return (resultMap["budgets"] as! [ResultMap]).map { (value: ResultMap) -> Budget in Budget(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: Budget) -> ResultMap in value.resultMap }, forKey: "budgets")
            }
          }

          public struct Budget: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Budget"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("amount", type: .scalar(Double.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(id: GraphQLID, amount: Double? = nil) {
              self.init(unsafeResultMap: ["__typename": "Budget", "id": id, "amount": amount])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return resultMap["id"]! as! GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "id")
              }
            }

            public var amount: Double? {
              get {
                return resultMap["amount"] as? Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteCategoryGroupMutationMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation DeleteCategoryGroupMutation($input: DeleteCategoryGroupInput!) {
      deleteCategoryGroup(input: $input) {
        __typename
        id
        title
        categories {
          __typename
          id
          title
          budgets {
            __typename
            amount
            category {
              __typename
              id
              title
            }
            createdAt
            id
            updatedAt
          }
        }
      }
    }
    """

  public let operationName: String = "DeleteCategoryGroupMutation"

  public var input: DeleteCategoryGroupInput

  public init(input: DeleteCategoryGroupInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteCategoryGroup", arguments: ["input": GraphQLVariable("input")], type: .list(.nonNull(.object(DeleteCategoryGroup.selections)))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteCategoryGroup: [DeleteCategoryGroup]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteCategoryGroup": deleteCategoryGroup.flatMap { (value: [DeleteCategoryGroup]) -> [ResultMap] in value.map { (value: DeleteCategoryGroup) -> ResultMap in value.resultMap } }])
    }

    /// Delete Category Group
    public var deleteCategoryGroup: [DeleteCategoryGroup]? {
      get {
        return (resultMap["deleteCategoryGroup"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [DeleteCategoryGroup] in value.map { (value: ResultMap) -> DeleteCategoryGroup in DeleteCategoryGroup(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [DeleteCategoryGroup]) -> [ResultMap] in value.map { (value: DeleteCategoryGroup) -> ResultMap in value.resultMap } }, forKey: "deleteCategoryGroup")
      }
    }

    public struct DeleteCategoryGroup: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CategoryGroup"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.nonNull(.object(Category.selections)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID, title: String? = nil, categories: [Category]? = nil) {
        self.init(unsafeResultMap: ["__typename": "CategoryGroup", "id": id, "title": title, "categories": categories.flatMap { (value: [Category]) -> [ResultMap] in value.map { (value: Category) -> ResultMap in value.resultMap } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var categories: [Category]? {
        get {
          return (resultMap["categories"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Category] in value.map { (value: ResultMap) -> Category in Category(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Category]) -> [ResultMap] in value.map { (value: Category) -> ResultMap in value.resultMap } }, forKey: "categories")
        }
      }

      public struct Category: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Category"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("budgets", type: .nonNull(.list(.nonNull(.object(Budget.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID, title: String? = nil, budgets: [Budget]) {
          self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title, "budgets": budgets.map { (value: Budget) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        public var budgets: [Budget] {
          get {
            return (resultMap["budgets"] as! [ResultMap]).map { (value: ResultMap) -> Budget in Budget(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: Budget) -> ResultMap in value.resultMap }, forKey: "budgets")
          }
        }

        public struct Budget: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Budget"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("amount", type: .scalar(Double.self)),
              GraphQLField("category", type: .nonNull(.object(Category.selections))),
              GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(amount: Double? = nil, category: Category, createdAt: String, id: GraphQLID, updatedAt: String) {
            self.init(unsafeResultMap: ["__typename": "Budget", "amount": amount, "category": category.resultMap, "createdAt": createdAt, "id": id, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var amount: Double? {
            get {
              return resultMap["amount"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "amount")
            }
          }

          public var category: Category {
            get {
              return Category(unsafeResultMap: resultMap["category"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "category")
            }
          }

          public var createdAt: String {
            get {
              return resultMap["createdAt"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var id: GraphQLID {
            get {
              return resultMap["id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var updatedAt: String {
            get {
              return resultMap["updatedAt"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Category: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Category"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("title", type: .scalar(String.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(id: GraphQLID, title: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return resultMap["id"]! as! GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "id")
              }
            }

            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteCategoryMutationMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation DeleteCategoryMutation($input: DeleteCategoryInput!) {
      deleteCategory(input: $input) {
        __typename
        id
        title
        budgets {
          __typename
          amount
          category {
            __typename
            id
            title
          }
          createdAt
          id
          updatedAt
        }
        transactions {
          __typename
          amount
          category {
            __typename
            id
            title
          }
          datetime
          id
          title
          wallet {
            __typename
            currency
            id
            title
          }
        }
      }
    }
    """

  public let operationName: String = "DeleteCategoryMutation"

  public var input: DeleteCategoryInput

  public init(input: DeleteCategoryInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteCategory", arguments: ["input": GraphQLVariable("input")], type: .list(.nonNull(.object(DeleteCategory.selections)))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteCategory: [DeleteCategory]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteCategory": deleteCategory.flatMap { (value: [DeleteCategory]) -> [ResultMap] in value.map { (value: DeleteCategory) -> ResultMap in value.resultMap } }])
    }

    /// Delete category
    public var deleteCategory: [DeleteCategory]? {
      get {
        return (resultMap["deleteCategory"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [DeleteCategory] in value.map { (value: ResultMap) -> DeleteCategory in DeleteCategory(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [DeleteCategory]) -> [ResultMap] in value.map { (value: DeleteCategory) -> ResultMap in value.resultMap } }, forKey: "deleteCategory")
      }
    }

    public struct DeleteCategory: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Category"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("budgets", type: .nonNull(.list(.nonNull(.object(Budget.selections))))),
          GraphQLField("transactions", type: .nonNull(.list(.nonNull(.object(Transaction.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID, title: String? = nil, budgets: [Budget], transactions: [Transaction]) {
        self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title, "budgets": budgets.map { (value: Budget) -> ResultMap in value.resultMap }, "transactions": transactions.map { (value: Transaction) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var budgets: [Budget] {
        get {
          return (resultMap["budgets"] as! [ResultMap]).map { (value: ResultMap) -> Budget in Budget(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Budget) -> ResultMap in value.resultMap }, forKey: "budgets")
        }
      }

      public var transactions: [Transaction] {
        get {
          return (resultMap["transactions"] as! [ResultMap]).map { (value: ResultMap) -> Transaction in Transaction(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Transaction) -> ResultMap in value.resultMap }, forKey: "transactions")
        }
      }

      public struct Budget: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Budget"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("amount", type: .scalar(Double.self)),
            GraphQLField("category", type: .nonNull(.object(Category.selections))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(amount: Double? = nil, category: Category, createdAt: String, id: GraphQLID, updatedAt: String) {
          self.init(unsafeResultMap: ["__typename": "Budget", "amount": amount, "category": category.resultMap, "createdAt": createdAt, "id": id, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var amount: Double? {
          get {
            return resultMap["amount"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "amount")
          }
        }

        public var category: Category {
          get {
            return Category(unsafeResultMap: resultMap["category"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "category")
          }
        }

        public var createdAt: String {
          get {
            return resultMap["createdAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var updatedAt: String {
          get {
            return resultMap["updatedAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public struct Category: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Category"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("title", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: GraphQLID, title: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return resultMap["id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }
        }
      }

      public struct Transaction: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Transaction"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("amount", type: .nonNull(.scalar(Double.self))),
            GraphQLField("category", type: .object(Category.selections)),
            GraphQLField("datetime", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("wallet", type: .nonNull(.object(Wallet.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(amount: Double, category: Category? = nil, datetime: String, id: GraphQLID, title: String? = nil, wallet: Wallet) {
          self.init(unsafeResultMap: ["__typename": "Transaction", "amount": amount, "category": category.flatMap { (value: Category) -> ResultMap in value.resultMap }, "datetime": datetime, "id": id, "title": title, "wallet": wallet.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var amount: Double {
          get {
            return resultMap["amount"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "amount")
          }
        }

        public var category: Category? {
          get {
            return (resultMap["category"] as? ResultMap).flatMap { Category(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "category")
          }
        }

        public var datetime: String {
          get {
            return resultMap["datetime"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "datetime")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        public var wallet: Wallet {
          get {
            return Wallet(unsafeResultMap: resultMap["wallet"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "wallet")
          }
        }

        public struct Category: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Category"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("title", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: GraphQLID, title: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return resultMap["id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }
        }

        public struct Wallet: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Wallet"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("currency", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("title", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(currency: String, id: GraphQLID, title: String) {
            self.init(unsafeResultMap: ["__typename": "Wallet", "currency": currency, "id": id, "title": title])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var currency: String {
            get {
              return resultMap["currency"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "currency")
            }
          }

          public var id: GraphQLID {
            get {
              return resultMap["id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var title: String {
            get {
              return resultMap["title"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }
        }
      }
    }
  }
}

public final class EditCategoryMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation EditCategory($input: EditCategoryInput!) {
      editCategory(input: $input) {
        __typename
        id
        title
      }
    }
    """

  public let operationName: String = "EditCategory"

  public var input: EditCategoryInput

  public init(input: EditCategoryInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("editCategory", arguments: ["input": GraphQLVariable("input")], type: .object(EditCategory.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(editCategory: EditCategory? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "editCategory": editCategory.flatMap { (value: EditCategory) -> ResultMap in value.resultMap }])
    }

    /// Edit Category
    public var editCategory: EditCategory? {
      get {
        return (resultMap["editCategory"] as? ResultMap).flatMap { EditCategory(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "editCategory")
      }
    }

    public struct EditCategory: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Category"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID, title: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }
    }
  }
}

public final class EditParentCategoryMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation EditParentCategory($input: EditCategoryGroupInput!) {
      editCategoryGroup(input: $input) {
        __typename
        id
        title
        categories {
          __typename
          id
          title
        }
      }
    }
    """

  public let operationName: String = "EditParentCategory"

  public var input: EditCategoryGroupInput

  public init(input: EditCategoryGroupInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("editCategoryGroup", arguments: ["input": GraphQLVariable("input")], type: .object(EditCategoryGroup.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(editCategoryGroup: EditCategoryGroup? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "editCategoryGroup": editCategoryGroup.flatMap { (value: EditCategoryGroup) -> ResultMap in value.resultMap }])
    }

    /// Edit Category Group
    public var editCategoryGroup: EditCategoryGroup? {
      get {
        return (resultMap["editCategoryGroup"] as? ResultMap).flatMap { EditCategoryGroup(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "editCategoryGroup")
      }
    }

    public struct EditCategoryGroup: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CategoryGroup"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.nonNull(.object(Category.selections)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID, title: String? = nil, categories: [Category]? = nil) {
        self.init(unsafeResultMap: ["__typename": "CategoryGroup", "id": id, "title": title, "categories": categories.flatMap { (value: [Category]) -> [ResultMap] in value.map { (value: Category) -> ResultMap in value.resultMap } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var categories: [Category]? {
        get {
          return (resultMap["categories"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Category] in value.map { (value: ResultMap) -> Category in Category(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Category]) -> [ResultMap] in value.map { (value: Category) -> ResultMap in value.resultMap } }, forKey: "categories")
        }
      }

      public struct Category: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Category"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("title", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }
    }
  }
}

public final class EditWalletMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation EditWallet($editWalletInput: EditWalletInput!) {
      editWallet(input: $editWalletInput) {
        __typename
        currency
        id
        title
        transactions {
          __typename
          id
          amount
          title
          datetime
          category {
            __typename
            id
            title
            budgets {
              __typename
              id
              amount
            }
          }
        }
      }
    }
    """

  public let operationName: String = "EditWallet"

  public var editWalletInput: EditWalletInput

  public init(editWalletInput: EditWalletInput) {
    self.editWalletInput = editWalletInput
  }

  public var variables: GraphQLMap? {
    return ["editWalletInput": editWalletInput]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("editWallet", arguments: ["input": GraphQLVariable("editWalletInput")], type: .object(EditWallet.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(editWallet: EditWallet? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "editWallet": editWallet.flatMap { (value: EditWallet) -> ResultMap in value.resultMap }])
    }

    /// Edit wallet
    public var editWallet: EditWallet? {
      get {
        return (resultMap["editWallet"] as? ResultMap).flatMap { EditWallet(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "editWallet")
      }
    }

    public struct EditWallet: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Wallet"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .nonNull(.scalar(String.self))),
          GraphQLField("transactions", type: .list(.nonNull(.object(Transaction.selections)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(currency: String, id: GraphQLID, title: String, transactions: [Transaction]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Wallet", "currency": currency, "id": id, "title": title, "transactions": transactions.flatMap { (value: [Transaction]) -> [ResultMap] in value.map { (value: Transaction) -> ResultMap in value.resultMap } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var currency: String {
        get {
          return resultMap["currency"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "currency")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String {
        get {
          return resultMap["title"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var transactions: [Transaction]? {
        get {
          return (resultMap["transactions"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Transaction] in value.map { (value: ResultMap) -> Transaction in Transaction(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Transaction]) -> [ResultMap] in value.map { (value: Transaction) -> ResultMap in value.resultMap } }, forKey: "transactions")
        }
      }

      public struct Transaction: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Transaction"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("amount", type: .nonNull(.scalar(Double.self))),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("datetime", type: .nonNull(.scalar(String.self))),
            GraphQLField("category", type: .object(Category.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID, amount: Double, title: String? = nil, datetime: String, category: Category? = nil) {
          self.init(unsafeResultMap: ["__typename": "Transaction", "id": id, "amount": amount, "title": title, "datetime": datetime, "category": category.flatMap { (value: Category) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var amount: Double {
          get {
            return resultMap["amount"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "amount")
          }
        }

        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        public var datetime: String {
          get {
            return resultMap["datetime"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "datetime")
          }
        }

        public var category: Category? {
          get {
            return (resultMap["category"] as? ResultMap).flatMap { Category(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "category")
          }
        }

        public struct Category: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Category"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("budgets", type: .nonNull(.list(.nonNull(.object(Budget.selections))))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: GraphQLID, title: String? = nil, budgets: [Budget]) {
            self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title, "budgets": budgets.map { (value: Budget) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return resultMap["id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }

          public var budgets: [Budget] {
            get {
              return (resultMap["budgets"] as! [ResultMap]).map { (value: ResultMap) -> Budget in Budget(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: Budget) -> ResultMap in value.resultMap }, forKey: "budgets")
            }
          }

          public struct Budget: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Budget"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("amount", type: .scalar(Double.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(id: GraphQLID, amount: Double? = nil) {
              self.init(unsafeResultMap: ["__typename": "Budget", "id": id, "amount": amount])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return resultMap["id"]! as! GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "id")
              }
            }

            public var amount: Double? {
              get {
                return resultMap["amount"] as? Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }
          }
        }
      }
    }
  }
}

public final class AuthenticationMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation Authentication($signUpEmailInput: SignUpWithEmailInput!, $signInCredential: CredentialsInput!) {
      signUpWithEmail(input: $signUpEmailInput) {
        __typename
        token
      }
      signInWithEmail(input: {credentials: $signInCredential}) {
        __typename
        token
        user {
          __typename
          id
          email
          firstName
          lastName
          middleName
          gender
          age
        }
      }
    }
    """

  public let operationName: String = "Authentication"

  public var signUpEmailInput: SignUpWithEmailInput
  public var signInCredential: CredentialsInput

  public init(signUpEmailInput: SignUpWithEmailInput, signInCredential: CredentialsInput) {
    self.signUpEmailInput = signUpEmailInput
    self.signInCredential = signInCredential
  }

  public var variables: GraphQLMap? {
    return ["signUpEmailInput": signUpEmailInput, "signInCredential": signInCredential]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("signUpWithEmail", arguments: ["input": GraphQLVariable("signUpEmailInput")], type: .object(SignUpWithEmail.selections)),
        GraphQLField("signInWithEmail", arguments: ["input": ["credentials": GraphQLVariable("signInCredential")]], type: .object(SignInWithEmail.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(signUpWithEmail: SignUpWithEmail? = nil, signInWithEmail: SignInWithEmail? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "signUpWithEmail": signUpWithEmail.flatMap { (value: SignUpWithEmail) -> ResultMap in value.resultMap }, "signInWithEmail": signInWithEmail.flatMap { (value: SignInWithEmail) -> ResultMap in value.resultMap }])
    }

    /// Sign up user using email and password credentials
    public var signUpWithEmail: SignUpWithEmail? {
      get {
        return (resultMap["signUpWithEmail"] as? ResultMap).flatMap { SignUpWithEmail(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "signUpWithEmail")
      }
    }

    /// Sign in user
    public var signInWithEmail: SignInWithEmail? {
      get {
        return (resultMap["signInWithEmail"] as? ResultMap).flatMap { SignInWithEmail(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "signInWithEmail")
      }
    }

    public struct SignUpWithEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AuthenticatedUser"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("token", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(token: String) {
        self.init(unsafeResultMap: ["__typename": "AuthenticatedUser", "token": token])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var token: String {
        get {
          return resultMap["token"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }
    }

    public struct SignInWithEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AuthenticatedUser"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("token", type: .nonNull(.scalar(String.self))),
          GraphQLField("user", type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(token: String, user: User) {
        self.init(unsafeResultMap: ["__typename": "AuthenticatedUser", "token": token, "user": user.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var token: String {
        get {
          return resultMap["token"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      public var user: User {
        get {
          return User(unsafeResultMap: resultMap["user"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "user")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["User"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
            GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
            GraphQLField("middleName", type: .scalar(String.self)),
            GraphQLField("gender", type: .scalar(String.self)),
            GraphQLField("age", type: .scalar(Int.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID, email: String, firstName: String, lastName: String, middleName: String? = nil, gender: String? = nil, age: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "User", "id": id, "email": email, "firstName": firstName, "lastName": lastName, "middleName": middleName, "gender": gender, "age": age])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var email: String {
          get {
            return resultMap["email"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        public var firstName: String {
          get {
            return resultMap["firstName"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return resultMap["lastName"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastName")
          }
        }

        public var middleName: String? {
          get {
            return resultMap["middleName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "middleName")
          }
        }

        public var gender: String? {
          get {
            return resultMap["gender"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int? {
          get {
            return resultMap["age"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "age")
          }
        }
      }
    }
  }
}

public final class SignInMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation SignIn($signInCredential: CredentialsInput!) {
      signInWithEmail(input: {credentials: $signInCredential}) {
        __typename
        token
        user {
          __typename
          id
          email
          firstName
          lastName
          middleName
          gender
          age
        }
      }
    }
    """

  public let operationName: String = "SignIn"

  public var signInCredential: CredentialsInput

  public init(signInCredential: CredentialsInput) {
    self.signInCredential = signInCredential
  }

  public var variables: GraphQLMap? {
    return ["signInCredential": signInCredential]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("signInWithEmail", arguments: ["input": ["credentials": GraphQLVariable("signInCredential")]], type: .object(SignInWithEmail.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(signInWithEmail: SignInWithEmail? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "signInWithEmail": signInWithEmail.flatMap { (value: SignInWithEmail) -> ResultMap in value.resultMap }])
    }

    /// Sign in user
    public var signInWithEmail: SignInWithEmail? {
      get {
        return (resultMap["signInWithEmail"] as? ResultMap).flatMap { SignInWithEmail(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "signInWithEmail")
      }
    }

    public struct SignInWithEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AuthenticatedUser"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("token", type: .nonNull(.scalar(String.self))),
          GraphQLField("user", type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(token: String, user: User) {
        self.init(unsafeResultMap: ["__typename": "AuthenticatedUser", "token": token, "user": user.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var token: String {
        get {
          return resultMap["token"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      public var user: User {
        get {
          return User(unsafeResultMap: resultMap["user"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "user")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["User"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
            GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
            GraphQLField("middleName", type: .scalar(String.self)),
            GraphQLField("gender", type: .scalar(String.self)),
            GraphQLField("age", type: .scalar(Int.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID, email: String, firstName: String, lastName: String, middleName: String? = nil, gender: String? = nil, age: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "User", "id": id, "email": email, "firstName": firstName, "lastName": lastName, "middleName": middleName, "gender": gender, "age": age])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var email: String {
          get {
            return resultMap["email"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        public var firstName: String {
          get {
            return resultMap["firstName"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return resultMap["lastName"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastName")
          }
        }

        public var middleName: String? {
          get {
            return resultMap["middleName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "middleName")
          }
        }

        public var gender: String? {
          get {
            return resultMap["gender"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int? {
          get {
            return resultMap["age"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "age")
          }
        }
      }
    }
  }
}

public final class SignUpMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation SignUp($signUpEmailInput: SignUpWithEmailInput!) {
      signUpWithEmail(input: $signUpEmailInput) {
        __typename
        token
      }
    }
    """

  public let operationName: String = "SignUp"

  public var signUpEmailInput: SignUpWithEmailInput

  public init(signUpEmailInput: SignUpWithEmailInput) {
    self.signUpEmailInput = signUpEmailInput
  }

  public var variables: GraphQLMap? {
    return ["signUpEmailInput": signUpEmailInput]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("signUpWithEmail", arguments: ["input": GraphQLVariable("signUpEmailInput")], type: .object(SignUpWithEmail.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(signUpWithEmail: SignUpWithEmail? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "signUpWithEmail": signUpWithEmail.flatMap { (value: SignUpWithEmail) -> ResultMap in value.resultMap }])
    }

    /// Sign up user using email and password credentials
    public var signUpWithEmail: SignUpWithEmail? {
      get {
        return (resultMap["signUpWithEmail"] as? ResultMap).flatMap { SignUpWithEmail(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "signUpWithEmail")
      }
    }

    public struct SignUpWithEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AuthenticatedUser"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("token", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(token: String) {
        self.init(unsafeResultMap: ["__typename": "AuthenticatedUser", "token": token])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var token: String {
        get {
          return resultMap["token"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }
    }
  }
}

public final class CategoryGroupsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query CategoryGroups {
      categoryGroups {
        __typename
        id
        title
        categories {
          __typename
          id
          title
        }
      }
    }
    """

  public let operationName: String = "CategoryGroups"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("categoryGroups", type: .list(.nonNull(.object(CategoryGroup.selections)))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(categoryGroups: [CategoryGroup]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "categoryGroups": categoryGroups.flatMap { (value: [CategoryGroup]) -> [ResultMap] in value.map { (value: CategoryGroup) -> ResultMap in value.resultMap } }])
    }

    /// Find all wallets
    public var categoryGroups: [CategoryGroup]? {
      get {
        return (resultMap["categoryGroups"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [CategoryGroup] in value.map { (value: ResultMap) -> CategoryGroup in CategoryGroup(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [CategoryGroup]) -> [ResultMap] in value.map { (value: CategoryGroup) -> ResultMap in value.resultMap } }, forKey: "categoryGroups")
      }
    }

    public struct CategoryGroup: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CategoryGroup"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.nonNull(.object(Category.selections)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID, title: String? = nil, categories: [Category]? = nil) {
        self.init(unsafeResultMap: ["__typename": "CategoryGroup", "id": id, "title": title, "categories": categories.flatMap { (value: [Category]) -> [ResultMap] in value.map { (value: Category) -> ResultMap in value.resultMap } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var categories: [Category]? {
        get {
          return (resultMap["categories"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Category] in value.map { (value: ResultMap) -> Category in Category(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Category]) -> [ResultMap] in value.map { (value: Category) -> ResultMap in value.resultMap } }, forKey: "categories")
        }
      }

      public struct Category: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Category"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("title", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }
    }
  }
}

public final class FetchProfileQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query FetchProfile {
      profile {
        __typename
        email
        id
        firstName
        middleName
        lastName
        age
        gender
      }
    }
    """

  public let operationName: String = "FetchProfile"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("profile", type: .object(Profile.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(profile: Profile? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "profile": profile.flatMap { (value: Profile) -> ResultMap in value.resultMap }])
    }

    /// Current user profile
    public var profile: Profile? {
      get {
        return (resultMap["profile"] as? ResultMap).flatMap { Profile(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "profile")
      }
    }

    public struct Profile: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .scalar(Int.self)),
          GraphQLField("gender", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(email: String, id: GraphQLID, firstName: String, middleName: String? = nil, lastName: String, age: Int? = nil, gender: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "email": email, "id": id, "firstName": firstName, "middleName": middleName, "lastName": lastName, "age": age, "gender": gender])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var email: String {
        get {
          return resultMap["email"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return resultMap["firstName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "firstName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var lastName: String {
        get {
          return resultMap["lastName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastName")
        }
      }

      public var age: Int? {
        get {
          return resultMap["age"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "age")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }
    }
  }
}

public final class FetchWalletsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query FetchWallets {
      wallets {
        __typename
        currency
        id
        title
        transactions {
          __typename
          id
          amount
          title
          datetime
          category {
            __typename
            id
            title
            budgets {
              __typename
              id
              amount
            }
          }
        }
      }
    }
    """

  public let operationName: String = "FetchWallets"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("wallets", type: .list(.nonNull(.object(Wallet.selections)))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(wallets: [Wallet]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "wallets": wallets.flatMap { (value: [Wallet]) -> [ResultMap] in value.map { (value: Wallet) -> ResultMap in value.resultMap } }])
    }

    /// Find all wallets
    public var wallets: [Wallet]? {
      get {
        return (resultMap["wallets"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Wallet] in value.map { (value: ResultMap) -> Wallet in Wallet(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [Wallet]) -> [ResultMap] in value.map { (value: Wallet) -> ResultMap in value.resultMap } }, forKey: "wallets")
      }
    }

    public struct Wallet: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Wallet"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("currency", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .nonNull(.scalar(String.self))),
          GraphQLField("transactions", type: .list(.nonNull(.object(Transaction.selections)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(currency: String, id: GraphQLID, title: String, transactions: [Transaction]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Wallet", "currency": currency, "id": id, "title": title, "transactions": transactions.flatMap { (value: [Transaction]) -> [ResultMap] in value.map { (value: Transaction) -> ResultMap in value.resultMap } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var currency: String {
        get {
          return resultMap["currency"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "currency")
        }
      }

      public var id: GraphQLID {
        get {
          return resultMap["id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String {
        get {
          return resultMap["title"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var transactions: [Transaction]? {
        get {
          return (resultMap["transactions"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Transaction] in value.map { (value: ResultMap) -> Transaction in Transaction(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Transaction]) -> [ResultMap] in value.map { (value: Transaction) -> ResultMap in value.resultMap } }, forKey: "transactions")
        }
      }

      public struct Transaction: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Transaction"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("amount", type: .nonNull(.scalar(Double.self))),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("datetime", type: .nonNull(.scalar(String.self))),
            GraphQLField("category", type: .object(Category.selections)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID, amount: Double, title: String? = nil, datetime: String, category: Category? = nil) {
          self.init(unsafeResultMap: ["__typename": "Transaction", "id": id, "amount": amount, "title": title, "datetime": datetime, "category": category.flatMap { (value: Category) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var amount: Double {
          get {
            return resultMap["amount"]! as! Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "amount")
          }
        }

        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        public var datetime: String {
          get {
            return resultMap["datetime"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "datetime")
          }
        }

        public var category: Category? {
          get {
            return (resultMap["category"] as? ResultMap).flatMap { Category(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "category")
          }
        }

        public struct Category: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Category"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("budgets", type: .nonNull(.list(.nonNull(.object(Budget.selections))))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: GraphQLID, title: String? = nil, budgets: [Budget]) {
            self.init(unsafeResultMap: ["__typename": "Category", "id": id, "title": title, "budgets": budgets.map { (value: Budget) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return resultMap["id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }

          public var budgets: [Budget] {
            get {
              return (resultMap["budgets"] as! [ResultMap]).map { (value: ResultMap) -> Budget in Budget(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: Budget) -> ResultMap in value.resultMap }, forKey: "budgets")
            }
          }

          public struct Budget: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Budget"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("amount", type: .scalar(Double.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(id: GraphQLID, amount: Double? = nil) {
              self.init(unsafeResultMap: ["__typename": "Budget", "id": id, "amount": amount])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return resultMap["id"]! as! GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "id")
              }
            }

            public var amount: Double? {
              get {
                return resultMap["amount"] as? Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "amount")
              }
            }
          }
        }
      }
    }
  }
}
